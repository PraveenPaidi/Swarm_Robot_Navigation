################################################ README ######################################################################
# Code flow
1 Utility Function - Target position generation for each robot.
2.A-star Algorithm -  Generation the path from the robots current position to target choosen by utility
3.Negotiation Algorithm - Avoid robot-to-robot collision
4. Artificial potential field - Localised path re-router for dynamic obstacles
5. Shape function - Dynamic obstacle avoider - overcomes APF's shortcomings.
##############################################################################################################################
To Run Utility function as stand alone:
1. Call the function as follows: (Python)
	until_fucntion(filename, N, robot_positions)
Inputs: Filename- Grid Map info (tct.txt path)
	N -  No.of robots
	robot_position - Current robot position for which the goal has to be choosen.
Output: robots_target_positions
To run the file autonomoulsy uncomment the last two lines and run the file "utility_function.py".

#############################################################################################################################
A-star Algorithm:(Python)
1. Set robo_start_position, end_positions(Use utility function to generate the points).

Input: Robot current position and target postion
Output: List of grid points/trajectory for each robot.
Run A_star_producing_paths.py

############################################################################################################################
Negotiation Algorithm(Matlab)
1. Set tct.txt and path.txt files generated by the A-start algorithm
Executes the algorithm and updates the trajectory accordingly.
Trajectory executed by the LQR algorithm in the background

############################################################################################################################
Artificial potential field(Matlab)
1. Set tct.txt and path.txt files generated by the A-start algorithm
2. Dynamic ojects (to be detected by the sensor)  should be set in the ob_x and ob_y lists with x and y positions corresponginly.
3. Use the test_apf.m file to test it.


############################################################################################################################
Shape function(Matlab)
1. Set tct.txt and path.txt files generated by the A-start algorithm
2. Use Final_run.m to run the file 

Dynamic obstacle potions to be sensed by sensors in plotPathOnMap function.
###############################################################################################################################

During the course of the testing and validation processes, obstacle positions had been added/commented.
Please uncomment the required obstacle point statements.
Code Modularized to accomodate hardware limitation during the course of the project.
Codes are all working with no bug as a part of the final upload.
Text files act as the communication models between codes. 

